/*
 * tests/util/lru_cacheUTest.cxxtest
 *
 * Copyright (C) 2011 OpenCog Foundation
 * All Rights Reserved
 *
 * Written by Joel Pitt <joel@opencog.org>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <stdio.h>
#include <exception>

#include <opencog/util/lru_cache.h>

#include <opencog/util/mt19937ar.h>

using namespace opencog;

class lru_cacheUTest : public CxxTest::TestSuite
{
    class _function : public std::unary_function<float, int> {
        MT19937RandGen* rnd;
        public:
        _function() {
            rnd = new MT19937RandGen(1);
        }
        // FOr some reason this segfaults?
        // ~_function() { delete rnd; }

        float operator()(const int& x) const {
            if(x == 2000)
                throw std::exception();
            return x + rnd->randfloat();
        }

        bool my_method() const {
            std::cout << "my_method" << std::endl;
            return true;
        }
    };


public:

    void test_lru_cache() {
        _function f;
        float answer;
        lru_cache<lru_cacheUTest::_function> cache(1000, f);
        for (unsigned int i=0; i < 1000; i++) {
            answer = cache(i);
            TS_ASSERT(answer >= i);
            TS_ASSERT(answer <= i+1);
        }
        TS_ASSERT_EQUALS(cache.get_misses(), 1000);
        TS_ASSERT_EQUALS(cache.get_hits(), 0);
        for (unsigned int i=0; i < 1000; i++) {
            answer = cache(i);
            TS_ASSERT(answer >= i);
            TS_ASSERT(answer <= i+1);
        }
        TS_ASSERT_EQUALS(cache.get_misses(), 1000);
        TS_ASSERT_EQUALS(cache.get_hits(), 1000);

        for (unsigned int i=500; i < 1500; i++) {
            answer = cache(i);
            TS_ASSERT(answer >= i);
            TS_ASSERT(answer <= i+1);
        }
        TS_ASSERT_EQUALS(cache.get_misses(), 1500);
        TS_ASSERT_EQUALS(cache.get_hits(), 1500);

        answer = cache(500);
        TS_ASSERT_EQUALS(cache.get_misses(), 1500);
        TS_ASSERT_EQUALS(cache.get_hits(), 1501);

        answer = cache(1500);
        TS_ASSERT_EQUALS(cache.get_misses(), 1501);
        TS_ASSERT_EQUALS(cache.get_hits(), 1501);

        // Ensure that entry for 500 wasn't removed as the earlier access should
        // move it up the lru list
        answer = cache(500);
        TS_ASSERT_EQUALS(cache.get_misses(), 1501);
        TS_ASSERT_EQUALS(cache.get_hits(), 1502);

        // Ensure that if the function throws an exception the cache
        // transmit it
        TS_ASSERT_THROWS(cache(2000), std::exception&);
        TS_ASSERT_EQUALS(cache.get_misses(), 1502);
        TS_ASSERT_EQUALS(cache.get_hits(), 1502);
        
        // Ensure that after throwing the exception the cache doesn't
        // get inconsistent (which would throw an exception)
        TS_ASSERT_THROWS_NOTHING(cache(500));        
    }

    /**
     * Test to check if we can access a method of a function being
     * cached.
     */
    void test_lru_cache_inherit() {
        _function f;
        lru_cache<lru_cacheUTest::_function> cache(1000, f);
        TS_ASSERT(cache.my_method());
    }

};
